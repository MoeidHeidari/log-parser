var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.421,1,1.421]],["body/modules/AppModule.html",[0,2.193,1,2.632,2,1.49,3,1.862,4,2.531,5,2.531,6,2.191,7,0.062,8,2.608,9,2.086,10,1.755,11,0.768,12,0.915,13,0.768,14,3.205,15,3.163,16,1.473,17,1.269,18,3.205,19,2.086,20,0.915,21,3.205,22,3.205,23,2.531,24,1.08,25,0.636,26,0.049,27,0.049]],["title/injectables/FileHelper.html",[28,0.875,29,1.206]],["body/injectables/FileHelper.html",[7,0.063,10,1.141,11,0.627,12,0.369,13,1.032,16,1.01,17,0.512,24,0.436,25,0.519,26,0.026,27,0.026,28,0.702,29,0.968,30,0.708,31,2.367,32,1.022,33,0.856,34,1.141,35,0.31,36,1.356,37,2.649,38,2.083,39,2.083,40,2.083,41,2.083,42,1.933,43,4.159,44,1.432,45,1.294,46,1.141,47,2.367,48,1.619,49,1.645,50,2.083,51,1.922,52,2.083,53,2.083,54,2.083,55,2.083,56,1.645,57,2.083,58,2.083,59,1.527,60,1.036,61,0.938,62,1.215,63,2.772,64,3.692,65,1.951,66,1.922,67,2.707,68,2.083,69,1.294,70,2.997,71,2.083,72,0.825,73,2.997,74,1.951,75,2.083,76,1.294,77,2.5,78,1.294,79,1.645,80,1.645,81,1.393,82,2.083,83,1.356,84,2.083,85,1.294,86,2.083,87,1.294,88,1.294,89,1.294,90,0.842,91,1.922,92,1.951,93,1.641,94,1.294,95,1.645,96,1.702,97,1.294,98,1.294,99,1.294,100,1.294,101,2.615,102,1.294,103,1.294,104,1.294,105,1.294,106,1.702,107,1.036,108,1.294,109,1.294,110,1.294,111,1.294,112,1.294,113,1.294,114,1.294,115,1.022,116,1.294,117,1.294,118,1.294,119,1.294,120,1.294,121,1.022,122,1.294,123,1.951,124,1.294,125,1.022,126,1.294,127,1.294,128,1.294,129,1.294,130,1.294,131,1.294,132,1.294,133,1.294,134,2.615,135,2.083,136,1.294,137,1.294,138,1.294,139,1.294,140,1.294,141,2.083,142,1.294,143,1.294,144,1.294,145,1.294,146,1.294,147,2.083,148,1.294,149,1.294,150,0.842,151,0.436,152,1.022,153,0.842,154,1.022,155,1.022]],["title/interfaces/LogModel.html",[156,1.421,157,1.206]],["body/interfaces/LogModel.html",[7,0.063,11,0.626,12,0.745,13,0.626,16,0.88,24,0.88,26,0.043,27,0.043,33,0.745,35,0.626,42,1.968,48,1.656,51,1.92,61,1.209,63,2.769,80,2.769,107,1.389,123,2.578,150,2.875,151,1.533,153,2.578,156,1.429,157,1.63,158,2.61,159,2.061,160,2.756,161,2.769,162,3.507,163,2.283,164,1.63,165,3.507,166,3.507,167,3.507,168,3.507,169,3.507,170,2.769,171,1.429,172,2.61,173,2.061,174,2.61,175,2.61]],["title/injectables/ParserCommand.html",[28,0.875,176,1.206]],["body/injectables/ParserCommand.html",[7,0.063,11,0.386,12,0.46,13,1.087,16,1.23,17,0.638,19,1.049,20,1.278,24,0.543,25,0.598,26,0.03,27,0.03,28,0.834,30,0.882,33,0.861,35,0.386,36,1.611,37,1.962,42,2.081,44,1.355,46,1.852,48,1.545,51,1.852,59,1.15,60,1.446,61,1.042,62,1.15,66,1.355,72,1.747,74,2.202,79,1.954,81,2.13,83,1.049,91,1.852,92,1.049,93,0.882,96,1.049,106,1.049,107,0.98,151,0.543,152,2.671,157,1.15,176,1.15,177,1.272,178,1.64,179,1.962,180,1.611,181,1.611,182,1.353,183,1.611,184,1.611,185,1.954,186,1.611,187,1.611,188,1.272,189,1.611,190,3.65,191,1.611,192,1.954,193,2.475,194,2.475,195,2.475,196,1.954,197,1.611,198,1.611,199,3.383,200,1.272,201,1.15,202,1.272,203,0.882,204,1.049,205,1.272,206,1.272,207,1.272,208,2.38,209,1.272,210,3.014,211,2.38,212,1.954,213,1.954,214,1.272,215,1.611,216,1.272,217,1.272,218,1.611,219,2.475,220,1.611,221,1.272,222,1.611,223,1.611,224,1.272,225,1.611,226,1.272,227,1.611,228,1.611]],["title/classes/ParserCommandDTO.html",[25,0.515,201,1.206]],["body/classes/ParserCommandDTO.html",[7,0.063,11,0.487,12,0.58,13,0.966,16,0.992,20,1.237,24,0.685,25,0.584,26,0.036,27,0.036,33,0.84,35,0.487,42,1.609,44,2.078,47,2.324,48,1.496,59,0.944,60,0.805,61,1.084,62,0.944,65,1.916,72,1.595,74,1.916,81,1.873,91,1.112,151,1.358,163,1.916,164,2.102,171,1.112,173,1.604,178,1.503,180,1.323,184,1.916,188,2.733,196,2.324,201,1.368,203,2.3,212,2.324,229,2.032,230,2.623,231,1.323,232,2.944,233,2.944,234,2.623,235,2.944,236,2.944,237,2.032,238,2.944,239,2.032,240,2.944,241,2.032,242,3.462,243,2.032,244,3.462,245,2.944,246,3.462,247,1.604,248,1.604,249,2.032,250,1.323,251,2.032,252,2.032,253,2.032,254,2.032,255,2.032,256,2.032,257,2.032,258,2.032]],["title/modules/ParserModule.html",[0,1.421,6,1.206]],["body/modules/ParserModule.html",[0,2.412,2,1.342,3,1.742,6,2.244,7,0.063,8,2.44,9,1.88,10,1.581,11,0.692,12,0.824,13,0.692,15,2.28,16,1.485,17,1.143,23,2.96,24,0.973,25,0.573,26,0.046,27,0.046,29,1.742,33,0.824,34,1.581,176,2.175,178,1.484,182,1.577,200,2.28,259,2.28,260,2.28,261,2.887,262,2.887,263,2.887,264,2.28,265,2.887]],["title/injectables/ParserService.html",[28,0.875,182,0.875]],["body/injectables/ParserService.html",[7,0.063,11,0.472,12,0.562,13,0.953,16,1.341,17,0.779,20,1.256,24,0.663,25,0.789,26,0.035,27,0.035,28,0.97,29,1.738,30,1.077,33,0.971,34,1.861,35,0.472,36,1.872,37,2.213,44,1.575,46,1.575,48,1.483,59,1.337,60,1.139,61,0.821,62,1.337,66,1.575,67,2.434,72,1.139,77,1.872,90,1.281,91,1.575,92,1.281,93,1.575,95,1.554,96,1.281,106,1.281,107,0.779,115,1.554,125,1.554,154,1.554,155,1.554,157,0.915,160,1.281,163,1.872,178,1.481,179,2.213,180,1.872,182,0.97,184,1.872,185,2.271,186,2.434,201,1.738,202,1.554,203,1.077,206,1.554,207,1.554,221,2.271,224,1.554,226,1.554,264,2.684,266,1.554,267,1.968,268,1.968,269,2.271,270,2.876,271,2.876,272,2.876,273,2.876,274,2.876,275,1.968,276,2.271,277,2.271,278,2.876,279,2.271,280,2.876,281,1.968,282,1.968,283,1.554,284,1.968,285,1.968,286,1.968,287,1.968,288,1.968,289,1.968,290,1.968,291,1.968,292,1.968]],["title/coverage.html",[293,2.758]],["body/coverage.html",[7,0.061,13,0.734,20,1.111,25,0.607,26,0.048,27,0.048,28,1.442,29,1.423,31,2.417,32,2.417,61,0.874,93,1.676,156,1.676,157,1.423,159,2.417,176,1.423,177,2.417,182,1.032,201,1.423,204,1.992,230,2.533,231,2.533,250,1.992,266,2.417,293,2.417,294,2.417,295,3.061,296,3.061,297,2.417,298,3.891,299,2.417,300,4.886,301,4.278,302,3.891,303,2.417,304,3.891,305,3.061,306,3.061,307,3.061,308,2.417]],["title/dependencies.html",[3,1.445,309,1.731]],["body/dependencies.html",[3,1.478,7,0.063,17,1.259,19,2.07,20,0.908,25,0.791,26,0.049,27,0.049,90,2.07,247,2.511,310,3.18,311,3.18,312,4.355,313,3.18,314,3.18,315,3.18,316,3.18,317,3.18,318,3.18,319,3.18,320,3.18,321,3.18,322,3.986,323,3.18,324,3.18,325,3.18,326,3.18,327,3.18,328,3.18,329,3.18,330,3.18,331,3.18,332,3.18,333,3.18,334,3.18,335,3.18]],["title/miscellaneous/enumerations.html",[336,0.868,337,2.454]],["body/miscellaneous/enumerations.html",[7,0.06,11,1.007,26,0.052,27,0.052,35,0.83,48,1.167,65,2.255,107,1.664,151,1.416,171,1.896,178,1.372,336,1.372,337,2.735,338,3.463,339,4.202,340,3.463,341,3.463,342,3.463,343,3.714,344,3.318,345,3.318]],["title/miscellaneous/functions.html",[336,0.868,346,2.454]],["body/miscellaneous/functions.html",[7,0.058,26,0.051,27,0.051,33,0.976,35,0.82,59,1.59,60,1.354,61,0.976,62,1.59,66,2.283,67,2.226,203,2.463,204,2.714,297,2.7,299,3.552,303,2.7,336,1.354,346,2.7,347,3.42,348,3.42,349,3.42,350,3.42,351,3.42,352,3.42,353,3.42,354,3.42,355,3.42,356,2.7,357,3.42]],["title/index.html",[35,0.525,358,2.192,359,1.731]],["body/index.html",[7,0.059,11,0.599,12,0.563,13,0.691,20,0.345,26,0.024,27,0.024,34,0.662,42,1.161,46,0.662,48,1.374,49,3.218,51,1.367,56,1.972,60,0.479,72,1.141,77,0.787,81,1.339,83,0.787,107,0.989,123,2.437,150,2.437,151,1.262,153,2.437,160,0.787,161,0.955,170,0.955,171,0.662,178,1.141,179,0.787,182,0.408,186,1.284,192,0.955,205,0.955,208,1.972,209,1.972,211,1.557,213,1.557,214,0.955,215,1.284,216,0.955,217,0.955,234,2.216,269,0.955,276,1.557,277,1.557,279,3.475,283,0.955,294,1.972,308,1.557,344,0.955,345,3.435,356,2.955,359,1.557,360,1.21,361,1.972,362,1.284,363,3.173,364,2.498,365,2.881,366,1.972,367,1.972,368,1.972,369,1.21,370,1.21,371,1.21,372,1.21,373,1.21,374,1.21,375,1.21,376,1.21,377,1.21,378,1.972,379,1.21,380,1.21,381,1.21,382,1.21,383,1.972,384,1.972,385,1.972,386,1.21,387,1.557,388,1.21,389,1.21,390,1.21,391,1.21,392,1.21,393,1.21,394,1.21,395,1.21,396,1.21,397,1.21,398,3.404,399,1.21,400,2.881,401,1.21,402,1.21,403,1.21,404,1.21,405,1.21,406,1.21,407,1.21,408,1.21,409,1.21,410,1.21,411,1.21,412,1.21,413,1.21,414,4.158,415,1.21,416,4.158,417,4.562,418,4.562,419,4.562,420,1.972,421,4.076,422,1.972,423,1.972,424,1.972,425,1.972,426,3.59,427,1.21,428,1.21,429,1.972,430,1.972,431,1.972,432,1.972,433,1.21,434,1.21,435,1.21,436,1.21,437,1.972,438,1.21,439,1.21,440,1.21,441,1.21,442,1.972,443,1.21,444,1.21,445,1.21,446,1.21,447,1.21,448,1.21,449,1.21,450,1.21,451,1.21,452,1.21,453,1.21,454,1.21,455,1.21,456,1.21,457,1.21,458,1.21,459,1.972,460,3.743,461,2.881,462,1.972,463,2.881,464,1.21,465,1.21,466,1.972,467,1.972,468,1.21,469,1.21,470,1.21,471,1.21,472,1.21,473,1.21]],["title/modules.html",[2,1.624]],["body/modules.html",[1,2.072,2,1.759,6,1.759,7,0.054,26,0.054,27,0.054,474,4.43,475,4.43,476,4.43,477,4.43]],["title/overview.html",[362,2.274]],["body/overview.html",[1,2.546,2,1.557,3,1.914,4,2.645,5,2.645,6,2.288,7,0.059,8,2.68,9,2.181,10,1.834,25,0.665,26,0.051,27,0.051,30,1.834,121,2.645,156,1.834,176,2.072,182,1.503,259,2.645,260,2.645,362,2.181,478,3.35,479,4.117]],["title/properties.html",[164,1.445,309,1.731]],["body/properties.html",[7,0.061,26,0.054,27,0.054,33,1.081,164,1.759,387,2.988,480,3.785,481,3.785,482,3.785,483,3.785]],["title/miscellaneous/variables.html",[336,0.868,484,2.454]],["body/miscellaneous/variables.html",[7,0.06,20,1.225,26,0.053,27,0.053,35,0.859,61,1.024,72,1.42,81,1.666,151,1.208,164,1.666,215,2.334,230,2.334,231,2.793,234,2.334,248,2.831,250,2.793,336,1.42,343,2.831,484,2.831,485,3.585]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":134,"title":{},"body":{"injectables/FileHelper.html":{}}}],["0.0.1",{"_index":480,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":327,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":318,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":317,"title":{},"body":{"dependencies.html":{}}}],["08",{"_index":414,"title":{},"body":{"index.html":{}}}],["09t02:12:51.253z",{"_index":415,"title":{},"body":{"index.html":{}}}],["09t02:12:51.254z",{"_index":422,"title":{},"body":{"index.html":{}}}],["09t02:12:51.255z",{"_index":428,"title":{},"body":{"index.html":{}}}],["09t02:12:51.257z",{"_index":430,"title":{},"body":{"index.html":{}}}],["09t02:12:51.258z",{"_index":435,"title":{},"body":{"index.html":{}}}],["09t02:12:51.259z",{"_index":437,"title":{},"body":{"index.html":{}}}],["09t02:12:51.262z",{"_index":445,"title":{},"body":{"index.html":{}}}],["09t02:12:51.264z",{"_index":447,"title":{},"body":{"index.html":{}}}],["09t02:12:51.265z",{"_index":450,"title":{},"body":{"index.html":{}}}],["1",{"_index":479,"title":{},"body":{"overview.html":{}}}],["1.1.19",{"_index":311,"title":{},"body":{"dependencies.html":{}}}],["1.6.2",{"_index":323,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":301,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":425,"title":{},"body":{"index.html":{}}}],["100",{"_index":300,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":432,"title":{},"body":{"index.html":{}}}],["1628475171254",{"_index":459,"title":{},"body":{"index.html":{}}}],["1628475171257",{"_index":462,"title":{},"body":{"index.html":{}}}],["1628475171258",{"_index":465,"title":{},"body":{"index.html":{}}}],["1628475171259",{"_index":466,"title":{},"body":{"index.html":{}}}],["1628475171262",{"_index":468,"title":{},"body":{"index.html":{}}}],["17.5.1",{"_index":335,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":121,"title":{},"body":{"injectables/FileHelper.html":{},"overview.html":{}}}],["2021",{"_index":421,"title":{},"body":{"index.html":{}}}],["2044",{"_index":413,"title":{},"body":{"index.html":{}}}],["3",{"_index":478,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":329,"title":{},"body":{"dependencies.html":{}}}],["3.1.1",{"_index":324,"title":{},"body":{"dependencies.html":{}}}],["3.7.2",{"_index":333,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":302,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":306,"title":{},"body":{"coverage.html":{}}}],["404,\"err\":\"not",{"_index":440,"title":{},"body":{"index.html":{}}}],["4361",{"_index":418,"title":{},"body":{"index.html":{}}}],["5.1.0",{"_index":332,"title":{},"body":{"dependencies.html":{}}}],["5.1.4",{"_index":320,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":304,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":330,"title":{},"body":{"dependencies.html":{}}}],["7000",{"_index":411,"title":{},"body":{"index.html":{}}}],["8.0.0",{"_index":312,"title":{},"body":{"dependencies.html":{}}}],["807b",{"_index":417,"title":{},"body":{"index.html":{}}}],["9]{1,2",{"_index":138,"title":{},"body":{"injectables/FileHelper.html":{}}}],["9]{1,2}.[0",{"_index":142,"title":{},"body":{"injectables/FileHelper.html":{}}}],["9]{1,2}:[0",{"_index":141,"title":{},"body":{"injectables/FileHelper.html":{}}}],["9]{1,2}[a",{"_index":139,"title":{},"body":{"injectables/FileHelper.html":{}}}],["9]{1,3}[a",{"_index":143,"title":{},"body":{"injectables/FileHelper.html":{}}}],["9]{1,4",{"_index":137,"title":{},"body":{"injectables/FileHelper.html":{}}}],["9abc55b2",{"_index":460,"title":{},"body":{"index.html":{}}}],["9dbe",{"_index":419,"title":{},"body":{"index.html":{}}}],["aa88b1b2e821",{"_index":463,"title":{},"body":{"index.html":{}}}],["aa88b1b2e821\",\"details\":\"about",{"_index":431,"title":{},"body":{"index.html":{}}}],["aa88b1b2e821\",\"details\":\"service",{"_index":429,"title":{},"body":{"index.html":{}}}],["aa88b1b2e821\",\"details\":\"user",{"_index":442,"title":{},"body":{"index.html":{}}}],["aa88b1b2e978",{"_index":461,"title":{},"body":{"index.html":{}}}],["aa88b1b2e978\",\"details\":\"about",{"_index":423,"title":{},"body":{"index.html":{}}}],["aa88b1b2e978\",\"details\":\"cannot",{"_index":438,"title":{},"body":{"index.html":{}}}],["aa88b1b2e978\",\"details\":\"service",{"_index":420,"title":{},"body":{"index.html":{}}}],["aa88b1b2e978\",\"details\":\"user",{"_index":433,"title":{},"body":{"index.html":{}}}],["access",{"_index":408,"title":{},"body":{"index.html":{}}}],["according",{"_index":50,"title":{},"body":{"injectables/FileHelper.html":{}}}],["addres",{"_index":238,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["address",{"_index":74,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{}}}],["ajson",{"_index":194,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["alias",{"_index":210,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["allowed",{"_index":248,"title":{},"body":{"classes/ParserCommandDTO.html":{},"miscellaneous/variables.html":{}}}],["allowedproperties",{"_index":250,"title":{},"body":{"classes/ParserCommandDTO.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["allowedproperties.includes(key",{"_index":255,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["app",{"_index":391,"title":{},"body":{"index.html":{}}}],["application",{"_index":350,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["architecture",{"_index":364,"title":{},"body":{"index.html":{}}}],["array",{"_index":64,"title":{},"body":{"injectables/FileHelper.html":{}}}],["async",{"_index":37,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"injectables/ParserService.html":{}}}],["author",{"_index":483,"title":{},"body":{"properties.html":{}}}],["await",{"_index":221,"title":{},"body":{"injectables/ParserCommand.html":{},"injectables/ParserService.html":{}}}],["bad",{"_index":355,"title":{},"body":{"miscellaneous/functions.html":{}}}],["based",{"_index":163,"title":{},"body":{"interfaces/LogModel.html":{},"classes/ParserCommandDTO.html":{},"injectables/ParserService.html":{}}}],["boolean",{"_index":385,"title":{},"body":{"index.html":{}}}],["bootstrap",{"_index":299,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":477,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":474,"title":{},"body":{"modules.html":{}}}],["build",{"_index":365,"title":{},"body":{"index.html":{}}}],["catch",{"_index":106,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"injectables/ParserService.html":{}}}],["catch(error",{"_index":226,"title":{},"body":{"injectables/ParserCommand.html":{},"injectables/ParserService.html":{}}}],["cd",{"_index":397,"title":{},"body":{"index.html":{}}}],["class",{"_index":25,"title":{"classes/ParserCommandDTO.html":{}},"body":{"modules/AppModule.html":{},"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"coverage.html":{},"dependencies.html":{},"overview.html":{}}}],["classes",{"_index":229,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["cli",{"_index":380,"title":{},"body":{"index.html":{}}}],["clone",{"_index":394,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_parsermodule",{"_index":259,"title":{},"body":{"modules/ParserModule.html":{},"overview.html":{}}}],["cluster_parsermodule_providers",{"_index":260,"title":{},"body":{"modules/ParserModule.html":{},"overview.html":{}}}],["code",{"_index":363,"title":{},"body":{"index.html":{}}}],["comman",{"_index":406,"title":{},"body":{"index.html":{}}}],["command",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"injectables/ParserService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["command({command",{"_index":189,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["command.input",{"_index":288,"title":{},"body":{"injectables/ParserService.html":{}}}],["command.loglevel",{"_index":289,"title":{},"body":{"injectables/ParserService.html":{}}}],["command/parser.command",{"_index":262,"title":{},"body":{"modules/ParserModule.html":{}}}],["commandmodule",{"_index":18,"title":{},"body":{"modules/AppModule.html":{}}}],["commandmodule,parsermodule",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["commands",{"_index":277,"title":{},"body":{"injectables/ParserService.html":{},"index.html":{}}}],["comming",{"_index":280,"title":{},"body":{"injectables/ParserService.html":{}}}],["common",{"_index":205,"title":{},"body":{"injectables/ParserCommand.html":{},"index.html":{}}}],["compodoc",{"_index":407,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":310,"title":{},"body":{"dependencies.html":{}}}],["connect",{"_index":469,"title":{},"body":{"index.html":{}}}],["console.error(error",{"_index":227,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["console.log(`success",{"_index":225,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["console.log(error",{"_index":228,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["const",{"_index":249,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["constructor",{"_index":180,"title":{},"body":{"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"injectables/ParserService.html":{}}}],["constructor(file_helper",{"_index":267,"title":{},"body":{"injectables/ParserService.html":{}}}],["constructor(parserservice",{"_index":181,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["constructor(properties",{"_index":232,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["constructs",{"_index":184,"title":{},"body":{"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"injectables/ParserService.html":{}}}],["content",{"_index":195,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["contents",{"_index":361,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":293,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["data",{"_index":77,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserService.html":{},"index.html":{}}}],["data.push(log",{"_index":105,"title":{},"body":{"injectables/FileHelper.html":{}}}],["date",{"_index":167,"title":{},"body":{"interfaces/LogModel.html":{}}}],["date(log.match('[0",{"_index":136,"title":{},"body":{"injectables/FileHelper.html":{}}}],["debug",{"_index":345,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["decorators",{"_index":188,"title":{},"body":{"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{}}}],["default",{"_index":215,"title":{},"body":{"injectables/ParserCommand.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":44,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"injectables/ParserService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ParserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["describe",{"_index":190,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["description",{"_index":33,"title":{},"body":{"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"miscellaneous/functions.html":{},"properties.html":{}}}],["desired",{"_index":57,"title":{},"body":{"injectables/FileHelper.html":{}}}],["different",{"_index":53,"title":{},"body":{"injectables/FileHelper.html":{}}}],["dist/cli.js",{"_index":454,"title":{},"body":{"index.html":{}}}],["dochttp://localhost:7000",{"_index":412,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":294,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto",{"_index":203,"title":{},"body":{"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"injectables/ParserService.html":{},"miscellaneous/functions.html":{}}}],["dto.ts",{"_index":231,"title":{},"body":{"classes/ParserCommandDTO.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dto.ts:18",{"_index":237,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["dto.ts:26",{"_index":241,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["dto.ts:33",{"_index":233,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["dtos",{"_index":392,"title":{},"body":{"index.html":{}}}],["dtos/parser",{"_index":202,"title":{},"body":{"injectables/ParserCommand.html":{},"injectables/ParserService.html":{}}}],["each",{"_index":240,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["elastic",{"_index":472,"title":{},"body":{"index.html":{}}}],["entered",{"_index":278,"title":{},"body":{"injectables/ParserService.html":{}}}],["entry",{"_index":351,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enum",{"_index":171,"title":{},"body":{"interfaces/LogModel.html":{},"classes/ParserCommandDTO.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["enumerations",{"_index":337,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":123,"title":{},"body":{"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"index.html":{}}}],["err:string",{"_index":175,"title":{},"body":{"interfaces/LogModel.html":{}}}],["error",{"_index":107,"title":{},"body":{"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"injectables/ParserCommand.html":{},"injectables/ParserService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["error\",\"code\":404,\"err\":\"cannot",{"_index":449,"title":{},"body":{"index.html":{}}}],["error,[error,debug,warn,info",{"_index":216,"title":{},"body":{"injectables/ParserCommand.html":{},"index.html":{}}}],["error,debug",{"_index":456,"title":{},"body":{"index.html":{}}}],["error,debug,warn,info",{"_index":166,"title":{},"body":{"interfaces/LogModel.html":{}}}],["ex",{"_index":208,"title":{},"body":{"injectables/ParserCommand.html":{},"index.html":{}}}],["example",{"_index":367,"title":{},"body":{"index.html":{}}}],["exists",{"_index":114,"title":{},"body":{"injectables/FileHelper.html":{}}}],["export",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{}}}],["express",{"_index":315,"title":{},"body":{"dependencies.html":{}}}],["extract",{"_index":370,"title":{},"body":{"index.html":{}}}],["faker",{"_index":331,"title":{},"body":{"dependencies.html":{}}}],["false",{"_index":218,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["file",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"coverage.html":{},"index.html":{}}}],["file_helper",{"_index":264,"title":{},"body":{"modules/ParserModule.html":{},"injectables/ParserService.html":{}}}],["filehelper",{"_index":29,"title":{"injectables/FileHelper.html":{}},"body":{"injectables/FileHelper.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"coverage.html":{}}}],["files",{"_index":271,"title":{},"body":{"injectables/ParserService.html":{}}}],["filter",{"_index":43,"title":{},"body":{"injectables/FileHelper.html":{}}}],["filter.length",{"_index":133,"title":{},"body":{"injectables/FileHelper.html":{}}}],["filtered",{"_index":196,"title":{},"body":{"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{}}}],["find",{"_index":56,"title":{},"body":{"injectables/FileHelper.html":{},"index.html":{}}}],["finished",{"_index":448,"title":{},"body":{"index.html":{}}}],["finished\"}run",{"_index":452,"title":{},"body":{"index.html":{}}}],["following",{"_index":405,"title":{},"body":{"index.html":{}}}],["format",{"_index":109,"title":{},"body":{"injectables/FileHelper.html":{}}}],["found",{"_index":441,"title":{},"body":{"index.html":{}}}],["fs",{"_index":86,"title":{},"body":{"injectables/FileHelper.html":{}}}],["fs.writefile(path",{"_index":118,"title":{},"body":{"injectables/FileHelper.html":{}}}],["full",{"_index":378,"title":{},"body":{"index.html":{}}}],["function",{"_index":298,"title":{},"body":{"coverage.html":{}}}],["function(err",{"_index":122,"title":{},"body":{"injectables/FileHelper.html":{}}}],["functions",{"_index":346,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gathered",{"_index":464,"title":{},"body":{"index.html":{}}}],["gathered\",\"user\":{\"id\":10,\"name\":\"alice",{"_index":434,"title":{},"body":{"index.html":{}}}],["gdpr",{"_index":375,"title":{},"body":{"index.html":{}}}],["general",{"_index":372,"title":{},"body":{"index.html":{}}}],["generate",{"_index":161,"title":{},"body":{"interfaces/LogModel.html":{},"index.html":{}}}],["generated",{"_index":168,"title":{},"body":{"interfaces/LogModel.html":{}}}],["getting",{"_index":358,"title":{"index.html":{}},"body":{}}],["git",{"_index":393,"title":{},"body":{"index.html":{}}}],["given",{"_index":47,"title":{},"body":{"injectables/FileHelper.html":{},"classes/ParserCommandDTO.html":{}}}],["h",{"_index":382,"title":{},"body":{"index.html":{}}}],["help",{"_index":383,"title":{},"body":{"index.html":{}}}],["helper",{"_index":34,"title":{},"body":{"injectables/FileHelper.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"index.html":{}}}],["helper.ts",{"_index":32,"title":{},"body":{"injectables/FileHelper.html":{},"coverage.html":{}}}],["helper.ts:18",{"_index":69,"title":{},"body":{"injectables/FileHelper.html":{}}}],["helper.ts:47",{"_index":78,"title":{},"body":{"injectables/FileHelper.html":{}}}],["helper.ts:62",{"_index":45,"title":{},"body":{"injectables/FileHelper.html":{}}}],["here",{"_index":379,"title":{},"body":{"index.html":{}}}],["https://github.com/moeidheidari/log",{"_index":395,"title":{},"body":{"index.html":{}}}],["id",{"_index":170,"title":{},"body":{"interfaces/LogModel.html":{},"index.html":{}}}],["identifier",{"_index":295,"title":{},"body":{"coverage.html":{}}}],["if(!filter.includes(log_level",{"_index":132,"title":{},"body":{"injectables/FileHelper.html":{}}}],["if(log",{"_index":104,"title":{},"body":{"injectables/FileHelper.html":{}}}],["implement",{"_index":471,"title":{},"body":{"index.html":{}}}],["import",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{}}}],["imports",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/ParserModule.html":{}}}],["index",{"_index":35,"title":{"index.html":{}},"body":{"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"injectables/ParserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["information",{"_index":49,"title":{},"body":{"injectables/FileHelper.html":{},"index.html":{}}}],["information\",\"userid",{"_index":424,"title":{},"body":{"index.html":{}}}],["inject",{"_index":281,"title":{},"body":{"injectables/ParserService.html":{}}}],["inject('file_helper",{"_index":284,"title":{},"body":{"injectables/ParserService.html":{}}}],["injectable",{"_index":28,"title":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"injectables/ParserService.html":{}},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"injectables/ParserService.html":{},"coverage.html":{}}}],["injectables",{"_index":30,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"injectables/ParserService.html":{},"overview.html":{}}}],["injection",{"_index":185,"title":{},"body":{"injectables/ParserCommand.html":{},"injectables/ParserService.html":{}}}],["input",{"_index":72,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"injectables/ParserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["input.log",{"_index":209,"title":{},"body":{"injectables/ParserCommand.html":{},"index.html":{}}}],["input:string",{"_index":251,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["inside",{"_index":84,"title":{},"body":{"injectables/FileHelper.html":{}}}],["install",{"_index":399,"title":{},"body":{"index.html":{}}}],["interface",{"_index":156,"title":{"interfaces/LogModel.html":{}},"body":{"interfaces/LogModel.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":158,"title":{},"body":{"interfaces/LogModel.html":{}}}],["isdefined",{"_index":242,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["isenum",{"_index":243,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["isenum(loglevel",{"_index":253,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["isnotempty",{"_index":244,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["isnotempty()@isdefined()@isstring",{"_index":236,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["isoptional",{"_index":245,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["isoptional()@isenum(loglevel",{"_index":239,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["isstring",{"_index":246,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["json",{"_index":80,"title":{},"body":{"injectables/FileHelper.html":{},"interfaces/LogModel.html":{}}}],["json.parse(log.match('{(?:)(.*)}')[0",{"_index":146,"title":{},"body":{"injectables/FileHelper.html":{}}}],["json.stringify(data",{"_index":119,"title":{},"body":{"injectables/FileHelper.html":{}}}],["keyof",{"_index":257,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["l",{"_index":217,"title":{},"body":{"injectables/ParserCommand.html":{},"index.html":{}}}],["level",{"_index":51,"title":{},"body":{"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"injectables/ParserCommand.html":{},"index.html":{}}}],["level.enum.ts",{"_index":339,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["levels",{"_index":65,"title":{},"body":{"injectables/FileHelper.html":{},"classes/ParserCommandDTO.html":{},"miscellaneous/enumerations.html":{}}}],["license",{"_index":481,"title":{},"body":{"properties.html":{}}}],["line",{"_index":101,"title":{},"body":{"injectables/FileHelper.html":{}}}],["list",{"_index":234,"title":{},"body":{"classes/ParserCommandDTO.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["list\",\"code",{"_index":439,"title":{},"body":{"index.html":{}}}],["list\",\"userid",{"_index":427,"title":{},"body":{"index.html":{}}}],["list\",\"userid\":16",{"_index":436,"title":{},"body":{"index.html":{}}}],["log",{"_index":48,"title":{},"body":{"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"injectables/ParserService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["log.json",{"_index":455,"title":{},"body":{"index.html":{}}}],["log.jsonoutput.json",{"_index":458,"title":{},"body":{"index.html":{}}}],["log.match('\\\\s",{"_index":128,"title":{},"body":{"injectables/FileHelper.html":{}}}],["log=await",{"_index":102,"title":{},"body":{"injectables/FileHelper.html":{}}}],["log_info",{"_index":145,"title":{},"body":{"injectables/FileHelper.html":{}}}],["log_info.details",{"_index":149,"title":{},"body":{"injectables/FileHelper.html":{}}}],["log_info.transactionid",{"_index":148,"title":{},"body":{"injectables/FileHelper.html":{}}}],["log_level",{"_index":152,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{}}}],["log_level.split",{"_index":220,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["log_level:string",{"_index":127,"title":{},"body":{"injectables/FileHelper.html":{}}}],["logfilter",{"_index":219,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["logger.error(`file",{"_index":112,"title":{},"body":{"injectables/FileHelper.html":{}}}],["logger.warn(`illigal",{"_index":108,"title":{},"body":{"injectables/FileHelper.html":{}}}],["loglevel",{"_index":151,"title":{},"body":{"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["loglevel:loglevel",{"_index":173,"title":{},"body":{"interfaces/LogModel.html":{},"classes/ParserCommandDTO.html":{}}}],["logmodel",{"_index":157,"title":{"interfaces/LogModel.html":{}},"body":{"interfaces/LogModel.html":{},"injectables/ParserCommand.html":{},"injectables/ParserService.html":{},"coverage.html":{}}}],["logstash",{"_index":470,"title":{},"body":{"index.html":{}}}],["look",{"_index":377,"title":{},"body":{"index.html":{}}}],["main",{"_index":349,"title":{},"body":{"miscellaneous/functions.html":{}}}],["matching",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mayd",{"_index":360,"title":{},"body":{"index.html":{}}}],["message",{"_index":165,"title":{},"body":{"interfaces/LogModel.html":{}}}],["metadata",{"_index":326,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":36,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"injectables/ParserService.html":{}}}],["michael",{"_index":444,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":336,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":160,"title":{},"body":{"interfaces/LogModel.html":{},"injectables/ParserService.html":{},"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/ParserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ParserModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ParserModule.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":60,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"injectables/ParserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nest",{"_index":321,"title":{},"body":{"dependencies.html":{}}}],["nestjs",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"injectables/ParserCommand.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":313,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":314,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":93,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"injectables/ParserService.html":{},"coverage.html":{}}}],["node",{"_index":453,"title":{},"body":{"index.html":{}}}],["notacceptableexception",{"_index":282,"title":{},"body":{"injectables/ParserService.html":{}}}],["notacceptableexception(error",{"_index":155,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserService.html":{}}}],["notacceptableexception,logger",{"_index":85,"title":{},"body":{"injectables/FileHelper.html":{}}}],["npm",{"_index":398,"title":{},"body":{"index.html":{}}}],["null",{"_index":120,"title":{},"body":{"injectables/FileHelper.html":{}}}],["number",{"_index":388,"title":{},"body":{"index.html":{}}}],["o",{"_index":214,"title":{},"body":{"injectables/ParserCommand.html":{},"index.html":{}}}],["object.keys(properties).foreach((key",{"_index":254,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["objects",{"_index":162,"title":{},"body":{"interfaces/LogModel.html":{}}}],["observable",{"_index":89,"title":{},"body":{"injectables/FileHelper.html":{}}}],["onion",{"_index":389,"title":{},"body":{"index.html":{}}}],["option",{"_index":199,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["optional",{"_index":62,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"injectables/ParserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":381,"title":{},"body":{"index.html":{}}}],["orders",{"_index":426,"title":{},"body":{"index.html":{}}}],["out",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileHelper.html":{},"modules/ParserModule.html":{},"overview.html":{}}}],["output",{"_index":81,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["output.log",{"_index":213,"title":{},"body":{"injectables/ParserCommand.html":{},"index.html":{}}}],["output:string",{"_index":252,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["overview",{"_index":362,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["package",{"_index":309,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":91,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"injectables/ParserService.html":{}}}],["parameters",{"_index":59,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"injectables/ParserService.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":179,"title":{},"body":{"injectables/ParserCommand.html":{},"injectables/ParserService.html":{},"index.html":{}}}],["parse(command",{"_index":224,"title":{},"body":{"injectables/ParserCommand.html":{},"injectables/ParserService.html":{}}}],["parse(input",{"_index":187,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["parsed",{"_index":63,"title":{},"body":{"injectables/FileHelper.html":{},"interfaces/LogModel.html":{}}}],["parser",{"_index":178,"title":{},"body":{"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["parser.git",{"_index":396,"title":{},"body":{"index.html":{}}}],["parser/parser.module",{"_index":21,"title":{},"body":{"modules/AppModule.html":{}}}],["parsercommand",{"_index":176,"title":{"injectables/ParserCommand.html":{}},"body":{"injectables/ParserCommand.html":{},"modules/ParserModule.html":{},"coverage.html":{},"overview.html":{}}}],["parsercommanddto",{"_index":201,"title":{"classes/ParserCommandDTO.html":{}},"body":{"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"injectables/ParserService.html":{},"coverage.html":{}}}],["parsermodule",{"_index":6,"title":{"modules/ParserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ParserModule.html":{},"modules.html":{},"overview.html":{}}}],["parserservice",{"_index":182,"title":{"injectables/ParserService.html":{}},"body":{"injectables/ParserCommand.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["parses",{"_index":46,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"injectables/ParserService.html":{},"index.html":{}}}],["parslog",{"_index":38,"title":{},"body":{"injectables/FileHelper.html":{}}}],["parslog(log",{"_index":41,"title":{},"body":{"injectables/FileHelper.html":{}}}],["parts",{"_index":58,"title":{},"body":{"injectables/FileHelper.html":{}}}],["passed",{"_index":235,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["path",{"_index":73,"title":{},"body":{"injectables/FileHelper.html":{}}}],["patterns",{"_index":55,"title":{},"body":{"injectables/FileHelper.html":{}}}],["pipe(take(1",{"_index":290,"title":{},"body":{"injectables/ParserService.html":{}}}],["point",{"_index":352,"title":{},"body":{"miscellaneous/functions.html":{}}}],["port",{"_index":410,"title":{},"body":{"index.html":{}}}],["positional",{"_index":198,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["private",{"_index":206,"title":{},"body":{"injectables/ParserCommand.html":{},"injectables/ParserService.html":{}}}],["prod}documentation",{"_index":403,"title":{},"body":{"index.html":{}}}],["promise",{"_index":67,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserService.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":94,"title":{},"body":{"injectables/FileHelper.html":{}}}],["promise(async",{"_index":285,"title":{},"body":{"injectables/ParserService.html":{}}}],["promise(function(resolve",{"_index":117,"title":{},"body":{"injectables/FileHelper.html":{}}}],["properties",{"_index":164,"title":{"properties.html":{}},"body":{"interfaces/LogModel.html":{},"classes/ParserCommandDTO.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["properties[key",{"_index":258,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["protection",{"_index":373,"title":{},"body":{"index.html":{}}}],["provide",{"_index":263,"title":{},"body":{"modules/ParserModule.html":{}}}],["provided",{"_index":276,"title":{},"body":{"injectables/ParserService.html":{},"index.html":{}}}],["providers",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/ParserModule.html":{}}}],["put",{"_index":82,"title":{},"body":{"injectables/FileHelper.html":{}}}],["rd",{"_index":87,"title":{},"body":{"injectables/FileHelper.html":{}}}],["rd.createinterface(fs.createreadstream(path",{"_index":98,"title":{},"body":{"injectables/FileHelper.html":{}}}],["readable",{"_index":113,"title":{},"body":{"injectables/FileHelper.html":{}}}],["reader",{"_index":97,"title":{},"body":{"injectables/FileHelper.html":{}}}],["reader.on(\"close",{"_index":110,"title":{},"body":{"injectables/FileHelper.html":{}}}],["reader.on(\"line",{"_index":100,"title":{},"body":{"injectables/FileHelper.html":{}}}],["readline",{"_index":88,"title":{},"body":{"injectables/FileHelper.html":{}}}],["readlogfile",{"_index":39,"title":{},"body":{"injectables/FileHelper.html":{}}}],["readlogfile(path",{"_index":68,"title":{},"body":{"injectables/FileHelper.html":{}}}],["readonly",{"_index":207,"title":{},"body":{"injectables/ParserCommand.html":{},"injectables/ParserService.html":{}}}],["reads",{"_index":71,"title":{},"body":{"injectables/FileHelper.html":{}}}],["red",{"_index":75,"title":{},"body":{"injectables/FileHelper.html":{}}}],["reflect",{"_index":325,"title":{},"body":{"dependencies.html":{}}}],["regex",{"_index":54,"title":{},"body":{"injectables/FileHelper.html":{}}}],["regular",{"_index":366,"title":{},"body":{"index.html":{}}}],["regulation",{"_index":374,"title":{},"body":{"index.html":{}}}],["reject",{"_index":95,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserService.html":{}}}],["reject(err",{"_index":124,"title":{},"body":{"injectables/FileHelper.html":{}}}],["reject(error",{"_index":115,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserService.html":{}}}],["represented",{"_index":272,"title":{},"body":{"injectables/ParserService.html":{}}}],["represents",{"_index":341,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["request",{"_index":356,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["required",{"_index":211,"title":{},"body":{"injectables/ParserCommand.html":{},"index.html":{}}}],["reset",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"modules/ParserModule.html":{},"overview.html":{}}}],["resolve",{"_index":286,"title":{},"body":{"injectables/ParserService.html":{}}}],["resolve(data",{"_index":125,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserService.html":{}}}],["resolve(of(data",{"_index":111,"title":{},"body":{"injectables/FileHelper.html":{}}}],["respects",{"_index":371,"title":{},"body":{"index.html":{}}}],["result",{"_index":193,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["results",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":467,"title":{},"body":{"index.html":{}}}],["retrieved\",\"user",{"_index":443,"title":{},"body":{"index.html":{}}}],["retrieved\",\"user\":{\"id\":16,\"orders\":[{\"id\":472,\"items\":{\"id\":7,\"price\":7.12",{"_index":446,"title":{},"body":{"index.html":{}}}],["return",{"_index":92,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"injectables/ParserService.html":{}}}],["returns",{"_index":66,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"injectables/ParserService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":328,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":400,"title":{},"body":{"index.html":{}}}],["running",{"_index":404,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":90,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserService.html":{},"dependencies.html":{}}}],["s')[0].replace(/\\s",{"_index":130,"title":{},"body":{"injectables/FileHelper.html":{}}}],["s/g",{"_index":131,"title":{},"body":{"injectables/FileHelper.html":{}}}],["s\\\\w+\\\\s",{"_index":129,"title":{},"body":{"injectables/FileHelper.html":{}}}],["search",{"_index":473,"title":{},"body":{"index.html":{}}}],["see",{"_index":376,"title":{},"body":{"index.html":{}}}],["service",{"_index":186,"title":{},"body":{"injectables/ParserCommand.html":{},"injectables/ParserService.html":{},"index.html":{}}}],["service/parser.service",{"_index":200,"title":{},"body":{"injectables/ParserCommand.html":{},"modules/ParserModule.html":{}}}],["show",{"_index":384,"title":{},"body":{"index.html":{}}}],["single",{"_index":273,"title":{},"body":{"injectables/ParserService.html":{}}}],["source",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"modules/ParserModule.html":{},"injectables/ParserService.html":{},"index.html":{}}}],["src",{"_index":390,"title":{},"body":{"index.html":{}}}],["src/.../cli.ts",{"_index":347,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../log",{"_index":338,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../parser",{"_index":485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":348,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/app.module.ts",{"_index":14,"title":{},"body":{"modules/AppModule.html":{}}}],["src/cli.ts",{"_index":297,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/parser/command/parser.command.ts",{"_index":177,"title":{},"body":{"injectables/ParserCommand.html":{},"coverage.html":{}}}],["src/parser/command/parser.command.ts:11",{"_index":183,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["src/parser/command/parser.command.ts:29",{"_index":191,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["src/parser/common/utils.ts",{"_index":303,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/parser/dtos/parser",{"_index":230,"title":{},"body":{"classes/ParserCommandDTO.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/parser/enum/log",{"_index":340,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/parser/helper/file",{"_index":31,"title":{},"body":{"injectables/FileHelper.html":{},"coverage.html":{}}}],["src/parser/model/log.model.ts",{"_index":159,"title":{},"body":{"interfaces/LogModel.html":{},"coverage.html":{}}}],["src/parser/parser.module.ts",{"_index":261,"title":{},"body":{"modules/ParserModule.html":{}}}],["src/parser/service/parser.service.ts",{"_index":266,"title":{},"body":{"injectables/ParserService.html":{},"coverage.html":{}}}],["src/parser/service/parser.service.ts:11",{"_index":268,"title":{},"body":{"injectables/ParserService.html":{}}}],["src/parser/service/parser.service.ts:23",{"_index":275,"title":{},"body":{"injectables/ParserService.html":{}}}],["start:{dev",{"_index":402,"title":{},"body":{"index.html":{}}}],["started",{"_index":359,"title":{"index.html":{}},"body":{"index.html":{}}}],["statements",{"_index":296,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":42,"title":{},"body":{"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"index.html":{}}}],["string,filter:string",{"_index":126,"title":{},"body":{"injectables/FileHelper.html":{}}}],["subscribe(async",{"_index":291,"title":{},"body":{"injectables/ParserService.html":{}}}],["success",{"_index":457,"title":{},"body":{"index.html":{}}}],["successfully",{"_index":451,"title":{},"body":{"index.html":{}}}],["support",{"_index":475,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":476,"title":{},"body":{"modules.html":{}}}],["t",{"_index":70,"title":{},"body":{"injectables/FileHelper.html":{}}}],["table",{"_index":308,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":307,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":283,"title":{},"body":{"injectables/ParserService.html":{},"index.html":{}}}],["takes",{"_index":192,"title":{},"body":{"injectables/ParserCommand.html":{},"index.html":{}}}],["test",{"_index":401,"title":{},"body":{"index.html":{}}}],["this.file_helper.readlogfile",{"_index":287,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.file_helper.writelogfile(command.output",{"_index":292,"title":{},"body":{"injectables/ParserService.html":{}}}],["this.parserservice",{"_index":223,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["this.parslog(line,filter",{"_index":103,"title":{},"body":{"injectables/FileHelper.html":{}}}],["this[key",{"_index":256,"title":{},"body":{"classes/ParserCommandDTO.html":{}}}],["through",{"_index":409,"title":{},"body":{"index.html":{}}}],["throw",{"_index":154,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserService.html":{}}}],["time_stamp",{"_index":135,"title":{},"body":{"injectables/FileHelper.html":{}}}],["timestamp",{"_index":150,"title":{},"body":{"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"index.html":{}}}],["timestamp:date",{"_index":172,"title":{},"body":{"interfaces/LogModel.html":{}}}],["todo",{"_index":368,"title":{},"body":{"index.html":{}}}],["tone",{"_index":274,"title":{},"body":{"injectables/ParserService.html":{}}}],["transaction",{"_index":169,"title":{},"body":{"interfaces/LogModel.html":{}}}],["transaction_id",{"_index":147,"title":{},"body":{"injectables/FileHelper.html":{}}}],["transactionid",{"_index":153,"title":{},"body":{"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"index.html":{}}}],["transactionid\":\"9abc55b2",{"_index":416,"title":{},"body":{"index.html":{}}}],["transactionid:string",{"_index":174,"title":{},"body":{"interfaces/LogModel.html":{}}}],["transformer",{"_index":316,"title":{},"body":{"dependencies.html":{}}}],["tries",{"_index":369,"title":{},"body":{"index.html":{}}}],["true",{"_index":212,"title":{},"body":{"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{}}}],["try",{"_index":96,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"injectables/ParserService.html":{}}}],["type",{"_index":61,"title":{},"body":{"injectables/FileHelper.html":{},"interfaces/LogModel.html":{},"injectables/ParserCommand.html":{},"classes/ParserCommandDTO.html":{},"injectables/ParserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["types/faker",{"_index":319,"title":{},"body":{"dependencies.html":{}}}],["understands",{"_index":342,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unknown",{"_index":197,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["unlicensed",{"_index":482,"title":{},"body":{"properties.html":{}}}],["useclass",{"_index":265,"title":{},"body":{"modules/ParserModule.html":{}}}],["useful",{"_index":269,"title":{},"body":{"injectables/ParserService.html":{},"index.html":{}}}],["user",{"_index":279,"title":{},"body":{"injectables/ParserService.html":{},"index.html":{}}}],["uses",{"_index":52,"title":{},"body":{"injectables/FileHelper.html":{}}}],["v",{"_index":386,"title":{},"body":{"index.html":{}}}],["validatedto",{"_index":204,"title":{},"body":{"injectables/ParserCommand.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validatedto(command",{"_index":222,"title":{},"body":{"injectables/ParserCommand.html":{}}}],["validatedto(dto",{"_index":353,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validates",{"_index":354,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":247,"title":{},"body":{"classes/ParserCommandDTO.html":{},"dependencies.html":{}}}],["value",{"_index":343,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":99,"title":{},"body":{"injectables/FileHelper.html":{}}}],["variable",{"_index":305,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":484,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":387,"title":{},"body":{"index.html":{},"properties.html":{}}}],["warn",{"_index":344,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["winston",{"_index":322,"title":{},"body":{"dependencies.html":{}}}],["work",{"_index":270,"title":{},"body":{"injectables/ParserService.html":{}}}],["writelogfile",{"_index":40,"title":{},"body":{"injectables/FileHelper.html":{}}}],["writelogfile(path",{"_index":76,"title":{},"body":{"injectables/FileHelper.html":{}}}],["writelogfile(path,data:t[]):promise",{"_index":116,"title":{},"body":{"injectables/FileHelper.html":{}}}],["writes",{"_index":79,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{}}}],["written",{"_index":83,"title":{},"body":{"injectables/FileHelper.html":{},"injectables/ParserCommand.html":{},"index.html":{}}}],["wrong",{"_index":357,"title":{},"body":{"miscellaneous/functions.html":{}}}],["yargs",{"_index":334,"title":{},"body":{"dependencies.html":{}}}],["z]')?.[0]).gettime",{"_index":144,"title":{},"body":{"injectables/FileHelper.html":{}}}],["z][0",{"_index":140,"title":{},"body":{"injectables/FileHelper.html":{}}}],["zoom",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/ParserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nParserModule\n\nParserModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nParserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ParserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CommandModule } from 'nestjs-command';\nimport { ParserModule } from '../parser/parser.module';\n\n\n\n@Module({\n  imports: [CommandModule,ParserModule,],\n  providers: []\n})\nexport class AppModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileHelper.html":{"url":"injectables/FileHelper.html","title":"injectable - FileHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parser/helper/file-helper.ts\n        \n\n\n            \n                Description\n            \n            \n                File helper class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                parsLog\n                            \n                            \n                                    Async\n                                readLogFile\n                            \n                            \n                                    Async\n                                writeLogFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        parsLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    parsLog(log: string, filter: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/parser/helper/file-helper.ts:62\n                \n            \n\n\n            \n                \n                    parses a given log information according to the log level (it uses different regex patterns to find desired parts of the log info)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        log to be parsed\n\n                                    \n                                \n                                \n                                    filter\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Log level filter (An array of log levels)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        readLogFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    readLogFile(path: string, filter: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/parser/helper/file-helper.ts:18\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Reads the input log file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Address of the file to be red\n\n                                    \n                                \n                                \n                                    filter\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Log level filter (An array of log levels)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>>\n\n                    \n                    \n                        Promise>>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        writeLogFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    writeLogFile(path, data: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/parser/helper/file-helper.ts:47\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Writes the given data (Parsed log json array) to the output log file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        address of the out put parsed log file\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        data to be written inside the output log file\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotAcceptableException,Logger } from \"@nestjs/common\";\nimport * as fs from 'fs';\nimport * as rd from 'readline'\nimport { Observable, of } from \"rxjs\";\n/**\n * File helper class\n */\n@Injectable()\nexport class FileHelper{\n    \n    //=======================================================================================================================================================================\n    /**\n     * Reads the input log file\n     * @param path Address of the file to be red\n     * @param filter Log level filter (An array of log levels)\n     * @returns Promise>>\n     */\n    async readLogFile(path: string, filter: string[]): Promise>> {\n        return new Promise((resolve, reject) => {\n            try {\n                let reader = rd.createInterface(fs.createReadStream(path));\n                var data: Array = [];\n                reader.on(\"line\", async (line: string) => {\n                    try {\n                        let log=await this.parsLog(line,filter);\n                        if(log) data.push(log);\n                    } catch (error) {\n                        Logger.warn(`Illigal format on line ${line}`);\n                    }\n                })\n                reader.on(\"close\", () => {\n                    resolve(of(data))\n                })\n            } catch (error) {\n                Logger.error(`file not readable or it does not exists`);\n                reject(error);\n            }\n        })\n    }\n    //=======================================================================================================================================================================\n    /**\n     * Writes the given data (Parsed log json array) to the output log file\n     * @param path address of the out put parsed log file\n     * @param data data to be written inside the output log file\n     * @returns Promise\n     */\n    async writeLogFile(path,data:T[]):Promise{\n        return new Promise(function(resolve, reject) {\n            fs.writeFile(path, JSON.stringify(data, null, 2), function(err) {\n                if (err) reject(err);\n                else resolve(data);\n            });\n        });\n    }\n    //=======================================================================================================================================================================\n    /**\n     * parses a given log information according to the log level (it uses different regex patterns to find desired parts of the log info)\n     * @param log log to be parsed\n     * @param filter Log level filter (An array of log levels)\n     * @returns Promise\n     */\n    async parsLog(log: string,filter:string[]): Promise {\n        try {\n            let log_level:string = log.match('\\\\s-\\\\s\\\\w+\\\\s-\\\\s')[0].replace(/\\s-\\s/g, \"\");\n            if(!filter.includes(log_level) && filter.length >0) return;\n            let time_stamp = new Date(log.match('[0-9]{1,4}\\-[0-9]{1,2}\\-[0-9]{1,2}[A-Z][0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}.[0-9]{1,3}[A-Z]')?.[0]).getTime();\n            let log_info = JSON.parse(log.match('{(?:)(.*)}')[0]);\n            let transaction_id = log_info.transactionId;\n            let err = log_info.details;\n            return { timestamp: time_stamp, logLevel: log_level, transactionId: transaction_id, err: err }\n        } catch (error) {\n            throw new NotAcceptableException(error);   \n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogModel.html":{"url":"interfaces/LogModel.html","title":"interface - LogModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LogModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parser/model/log.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Log model (We generate  the parsed log json objects based on this model)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            err\n                                        \n                                \n                                \n                                        \n                                            logLevel\n                                        \n                                \n                                \n                                        \n                                            timeStamp\n                                        \n                                \n                                \n                                        \n                                            transactionId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        err\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        err:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    error message of the log \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logLevel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logLevel:         LogLevel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LogLevel\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    level of the log (error,debug,warn,info) \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeStamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeStamp:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Timestamp of the log generated \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transactionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transactionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    transaction id of the log \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { LogLevel } from \"../enum\";\n/**\n * Log model (We generate  the parsed log json objects based on this model)\n */\nexport interface LogModel{\n    /**\n     * Timestamp of the log generated \n     */\n    timeStamp:Date,\n    /**\n     * level of the log (error,debug,warn,info) \n     */\n    logLevel:LogLevel\n    /**\n     * transaction id of the log \n     */\n    transactionId:string,\n    /**\n     * error message of the log \n     */\n    err:string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParserCommand.html":{"url":"injectables/ParserCommand.html","title":"injectable - ParserCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParserCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parser/command/parser.command.ts\n        \n\n\n            \n                Description\n            \n            \n                Log parser command\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                parse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(parserService: ParserService)\n                    \n                \n                        \n                            \n                                Defined in src/parser/command/parser.command.ts:11\n                            \n                        \n\n                \n                    \n                            Constructs the Log parser command class\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        parserService\n                                                  \n                                                        \n                                                                        ParserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Injection of parser service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        parse\n                        \n                    \n                \n            \n            \n                \n                    \n                    parse(input: string, output: string, log_level: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Command({command: '*', describe: 'parses a log file'})\n                \n            \n\n            \n                \n                    Defined in src/parser/command/parser.command.ts:29\n                \n            \n\n\n            \n                \n                    Parser command that takes the input log file, parses and writes the result to the output file as ajson content.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        address of the input file\n\n                                    \n                                \n                                \n                                    output\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        address of the output file\n\n                                    \n                                \n                                \n                                    log_level\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        log level to be filtered\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        LogModel[]\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Command, Positional, Option } from 'nestjs-command'\nimport { Injectable } from '@nestjs/common'\nimport { ParserService } from '../service/parser.service'\nimport { ParserCommandDTO } from '../dtos/parser-command-dto'\nimport { validateDTO } from '../common'\n\n/**\n * Log parser command\n */\n@Injectable()\nexport class ParserCommand {\n    /**\n     * Constructs the Log parser command class\n     * @param parserService Injection of parser service\n     */\n  constructor (private readonly parserService: ParserService) {}\n\n  /**\n   * Parser command that takes the input log file, parses and writes the result to the output file as ajson content.\n   * @param input address of the input file\n   * @param output address of the output file\n   * @param log_level log level to be filtered\n   * @returns LogModel[]\n   */\n  @Command({\n    command: '*',\n    describe: 'parses a log file',\n  })\n  async parse (\n    @Option({\n      name: 'input',\n      describe: 'input log file (ex: \"input.log\")',\n      type: 'string',\n      alias: 'i',\n      required: true,\n    })\n    input: string,\n    @Option({\n      name: 'output',\n      describe: 'output log file (ex: \"output.log\")',\n      type: 'string',\n      alias: 'o',\n      default: 'output.log',\n      required: true,\n    })\n    output: string,\n    @Option({\n      name: 'log-level',\n      describe: 'log-level (ex: \"error,[error,debug,warn,info]\")',\n      type: 'string',\n      alias: 'l',\n      default: 'error',\n      required: false,\n    })\n    log_level: string,\n  ) {\n    try {\n      let logFilter = log_level.split(',')\n      let command = new ParserCommandDTO({\n        input: input,\n        output: output,\n        logLevel: logFilter,\n      })\n      await validateDTO(command)\n      return this.parserService\n        .parse(command)\n        .then(() => {\n         console.log(`Success 😀. output is written in ${output}`)\n        })\n        .catch(error => {\n          console.error(error);\n        })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParserCommandDTO.html":{"url":"classes/ParserCommandDTO.html","title":"class - ParserCommandDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParserCommandDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parser/dtos/parser-command-dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Log parser command DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                input\n                            \n                            \n                                logLevel\n                            \n                            \n                                output\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(properties: any)\n                    \n                \n                        \n                            \n                                Defined in src/parser/dtos/parser-command-dto.ts:33\n                            \n                        \n\n                \n                    \n                            Constructs the DTO based on given properties\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                list of passed properties  to the DTO\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        input\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDefined()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parser/dtos/parser-command-dto.ts:18\n                        \n                    \n\n            \n                \n                    addres of the log file input\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logLevel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogLevel[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(LogLevel, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parser/dtos/parser-command-dto.ts:33\n                        \n                    \n\n            \n                \n                    list of log levels to be filtered by the parser\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        output\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDefined()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parser/dtos/parser-command-dto.ts:26\n                        \n                    \n\n            \n                \n                    address of the output log file\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDefined, IsEnum, IsNotEmpty, IsOptional, IsString } from \"class-validator\";\nimport { LogLevel } from \"../enum\";\n\n/**\n * list of allowed properties\n */\nconst allowedProperties = ['input', 'output', 'logLevel'];\n/**\n * Log parser command DTO\n */\nexport class ParserCommandDTO{\n  /**\n  * addres of the log file input\n  */\n    @IsNotEmpty()\n    @IsDefined()\n    @IsString()\n    input:string;\n    //...........................................................................................................\n    /**\n    * address of the output log file\n    */\n    @IsNotEmpty()\n    @IsDefined()\n    @IsString()\n    output:string;\n    //...........................................................................................................\n    /**\n    * list of log levels to be filtered by the parser\n    */\n    @IsOptional()\n    @IsEnum(LogLevel, { each: true })\n    logLevel:LogLevel[]\n    //...........................................................................................................\n    /**\n     * Constructs the DTO based on given properties\n     * @param properties list of passed properties  to the DTO\n     */\n    constructor(properties: any = {}) {\n        Object.keys(properties).forEach((key: string) => {\n          if (allowedProperties.includes(key)) this[key as keyof this] = properties[key];\n        });\n      }\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ParserModule.html":{"url":"modules/ParserModule.html","title":"module - ParserModule","body":"\n                   \n\n\n\n\n    Modules\n    ParserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ParserModule\n\n\n\ncluster_ParserModule_providers\n\n\n\n\nParserCommand\n\nParserCommand\n\n\n\nParserModule\n\nParserModule\n\nParserModule -->\n\nParserCommand->ParserModule\n\n\n\n\n\nParserService\n\nParserService\n\nParserModule -->\n\nParserService->ParserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/parser/parser.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Parser module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ParserCommand\n                        \n                        \n                            ParserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ParserCommand } from './command/parser.command'\nimport { FileHelper } from './helper'\nimport { ParserService } from './service/parser.service'\n\n/**\n * Parser module\n */\n@Module({\n  imports: [],\n  providers: [\n    ParserCommand,\n    ParserService,\n    {\n      provide: 'FILE_HELPER',\n      useClass: FileHelper,\n    },\n  ],\n})\nexport class ParserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParserService.html":{"url":"injectables/ParserService.html","title":"injectable - ParserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parser/service/parser.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Log parser service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                parse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(file_helper: FileHelper)\n                    \n                \n                        \n                            \n                                Defined in src/parser/service/parser.service.ts:11\n                            \n                        \n\n                \n                    \n                            Constructs the log parser service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        file_helper\n                                                  \n                                                        \n                                                                        FileHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                file helper injection (useful to work with the log files) represented as a single tone class\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        parse\n                        \n                    \n                \n            \n            \n                \n                    \n                    parse(command: ParserCommandDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/parser/service/parser.service.ts:23\n                \n            \n\n\n            \n                \n                    Parses the input log file based on the provided commands\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                ParserCommandDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Command entered by the user (Comming from Command class)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, NotAcceptableException } from '@nestjs/common'\nimport { FileHelper } from '../helper'\nimport { take } from 'rxjs'\nimport { LogModel } from '../model'\nimport { ParserCommandDTO } from '../dtos/parser-command-dto'\n\n/**\n * Log parser service\n */\n@Injectable()\nexport class ParserService {\n  /**\n   *Constructs the log parser service\n   * @param file_helper file helper injection (useful to work with the log files) represented as a single tone class\n   */\n  constructor (@Inject('FILE_HELPER') private readonly file_helper: FileHelper){}\n  //==============================================================================================================\n  /**\n   * Parses the input log file based on the provided commands\n   * @param command Command entered by the user (Comming from Command class)\n   * @returns Promise\n   */\n  async parse (command: ParserCommandDTO): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        ;(\n          await this.file_helper.readLogFile(\n            command.input,\n            command.logLevel,\n          )\n        )\n          .pipe(take(1))\n          .subscribe(async (data: any) => {\n            await this.file_helper.writeLogFile(command.output, data)\n            resolve(data)\n          })\n      } catch (error) {\n        reject(error)\n      }\n    }).catch(error => {\n      throw new NotAcceptableException(error)\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/cli.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/parser/command/parser.command.ts\n            \n            injectable\n            ParserCommand\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/parser/common/utils.ts\n            \n            function\n            validateDTO\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/parser/dtos/parser-command-dto.ts\n            \n            class\n            ParserCommandDTO\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/parser/dtos/parser-command-dto.ts\n            \n            variable\n            allowedProperties\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/parser/helper/file-helper.ts\n            \n            injectable\n            FileHelper\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/parser/model/log.model.ts\n            \n            interface\n            LogModel\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/parser/service/parser.service.ts\n            \n            injectable\n            ParserService\n            \n                100 %\n                (3/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            @types/faker : ^5.1.4\n        \n            nest-winston : ^1.6.2\n        \n            nestjs-command : ^3.1.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            faker : ^5.1.0\n        \n            winston : ^3.7.2\n        \n            yargs : ^17.5.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LogLevel   (src/.../log-level.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/parser/enum/log-level.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        LogLevel\n                    \n                \n                    \n                        \n                            An enum that represents the  log levels the parser understands\n\n                        \n                    \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n                        \n                            \n                                 INFO\n                            \n                        \n                        \n                            \n                                Value : info\n                            \n                        \n                        \n                            \n                                 WARN\n                            \n                        \n                        \n                            \n                                Value : warn\n                            \n                        \n                        \n                            \n                                 DEBUG\n                            \n                        \n                        \n                            \n                                Value : debug\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../cli.ts)\n                        \n                        \n                            validateDTO   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/cli.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Main application entry point\n\n\n                \n            \n        \n    \n    src/parser/common/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        validateDTO\n                        \n                    \n                \n            \n            \n                \nvalidateDTO(dto: any)\n                \n            \n\n\n\n\n            \n                \n                    validates dto and returns bad request if it is wrong\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nMAYD Log parser\nTable of Contents\n\nTable of Contents\nOverview\nProvided Commands\nCode architecture\nsource code\nService build information\nRegular user\nDocumentation\nExample\nToDo list\n\nOverview\n  Log parser takes a log input file and tries to parse it to extract useful information. It also respects General Data Protection Regulation (GDPR)\n  You can see take a look  at the Full documentation here\n\n\n\nProvided Commands\ncli\n\nparses a log file\n\nOptions:\n  -h, --help       Show help                                           [boolean]\n  -l, --log-level  log-level (ex: \"error,[error,debug,warn,info]\")\n                                                     [string] [default: \"error\"]\n  -o, --output     output log file (ex: \"output.log\")\n                                     [string] [required] [default: \"output.log\"]\n  -i, --input      input log file (ex: \"input.log\")          [string] [required]\n  -v, --version    Show version number                                 [boolean]\nCode architecture\nOnion Architecture\nsrc\n├── app\n└── parser\n    ├── command\n    ├── common\n    ├── dtos\n    ├── enum\n    ├── helper\n    ├── model\n    └── service\nsource code\ngit clone https://github.com/MoeidHeidari/log-parser.git\ncd log-parserService build information\nRegular user\nnpm install\nnpm run build\nnpm run test\nnpm start:{dev || debug || prod}Documentation\nBy running following comman you can generate the full code documentation (Compodoc) and get access to it through port 7000\nnpm run dochttp://localhost:7000\nExample\ninput.log\n2044-08-09T02:12:51.253Z - info - {\"transactionId\":\"9abc55b2-807b-4361-9dbe-aa88b1b2e978\",\"details\":\"Service is started\"}\n2021-08-09T02:12:51.254Z - debug - {\"transactionId\":\"9abc55b2-807b-4361-9dbe-aa88b1b2e978\",\"details\":\"About to request the user information\",\"userId\": 10}\n2021-08-09T02:12:51.254Z - debug - {\"transactionId\":\"9abc55b2-807b-4361-9dbe-aa88b1b2e978\",\"details\":\"About to request user orders list\",\"userId\": 10}\n2021-08-09T02:12:51.255Z - info - {\"transactionId\":\"9abc55b2-807b-4361-9dbe-aa88b1b2e821\",\"details\":\"Service is started\"}\n2021-08-09T02:12:51.257Z - debug - {\"transactionId\":\"9abc55b2-807b-4361-9dbe-aa88b1b2e821\",\"details\":\"About to request the user information\",\"userId\": 16}\n2021-08-09T02:12:51.257Z - debug - {\"transactionId\":\"9abc55b2-807b-4361-9dbe-aa88b1b2e978\",\"details\":\"User information is gathered\",\"user\":{\"id\":10,\"name\":\"Alice\"}}\n2021-08-09T02:12:51.258Z - debug - {\"transactionId\":\"9abc55b2-807b-4361-9dbe-aa88b1b2e821\",\"details\":\"About to request user orders list\",\"userId\":16}\n2021-08-09T02:12:51.259Z - error - {\"transactionId\":\"9abc55b2-807b-4361-9dbe-aa88b1b2e978\",\"details\":\"Cannot find user orders list\",\"code\": 404,\"err\":\"Not found\"}\n2021-08-09T02:12:51.259Z - debug - {\"transactionId\":\"9abc55b2-807b-4361-9dbe-aa88b1b2e821\",\"details\":\"User information is retrieved\",\"user\": {\"id\": 16, \"name\": \"Michael\"}}\n2021-08-09T02:12:51.262Z - debug - {\"transactionId\":\"9abc55b2-807b-4361-9dbe-aa88b1b2e821\",\"details\":\"User information is retrieved\",\"user\":{\"id\":16,\"orders\":[{\"id\":472,\"items\":{\"id\":7,\"price\":7.12}}]}}\n2021-08-09T02:12:51.264Z - warn - {\"transactionId\":\"9abc55b2-807b-4361-9dbe-aa88b1b2e978\",\"details\":\"Service finished with error\",\"code\":404,\"err\":\"Cannot find user orders list\"}\n2021-08-09T02:12:51.265Z - info - {\"transactionId\":\"9abc55b2-807b-4361-9dbe-aa88b1b2e821\",\"details\":\"Service is successfully finished\"}Run Log parser\nnpm run build\nnode dist/cli.js --input input.log --output log.json --log-level error,debug\nSuccess 😀. output is written in log.jsonoutput.json\n[\n  {\n    \"timestamp\": 1628475171254,\n    \"logLevel\": \"debug\",\n    \"transactionId\": \"9abc55b2-807b-4361-9dbe-aa88b1b2e978\",\n    \"err\": \"About to request the user information\"\n  },\n  {\n    \"timestamp\": 1628475171254,\n    \"logLevel\": \"debug\",\n    \"transactionId\": \"9abc55b2-807b-4361-9dbe-aa88b1b2e978\",\n    \"err\": \"About to request user orders list\"\n  },\n  {\n    \"timestamp\": 1628475171257,\n    \"logLevel\": \"debug\",\n    \"transactionId\": \"9abc55b2-807b-4361-9dbe-aa88b1b2e821\",\n    \"err\": \"About to request the user information\"\n  },\n  {\n    \"timestamp\": 1628475171257,\n    \"logLevel\": \"debug\",\n    \"transactionId\": \"9abc55b2-807b-4361-9dbe-aa88b1b2e978\",\n    \"err\": \"User information is gathered\"\n  },\n  {\n    \"timestamp\": 1628475171258,\n    \"logLevel\": \"debug\",\n    \"transactionId\": \"9abc55b2-807b-4361-9dbe-aa88b1b2e821\",\n    \"err\": \"About to request user orders list\"\n  },\n  {\n    \"timestamp\": 1628475171259,\n    \"logLevel\": \"error\",\n    \"transactionId\": \"9abc55b2-807b-4361-9dbe-aa88b1b2e978\",\n    \"err\": \"Cannot find user orders list\"\n  },\n  {\n    \"timestamp\": 1628475171259,\n    \"logLevel\": \"debug\",\n    \"transactionId\": \"9abc55b2-807b-4361-9dbe-aa88b1b2e821\",\n    \"err\": \"User information is retrieved\"\n  },\n  {\n    \"timestamp\": 1628475171262,\n    \"logLevel\": \"debug\",\n    \"transactionId\": \"9abc55b2-807b-4361-9dbe-aa88b1b2e821\",\n    \"err\": \"User information is retrieved\"\n  }\n]ToDo list\n\n connect it to logstash\n implement elastic search\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ParserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_ParserModule\n\n\n\ncluster_ParserModule_providers\n\n\n\n\nParserModule\n\nParserModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nParserModule->AppModule\n\n\n\n\n\nParserCommand\n\nParserCommand\n\nParserModule -->\n\nParserCommand->ParserModule\n\n\n\n\n\nParserService\n\nParserService\n\nParserModule -->\n\nParserService->ParserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            allowedProperties   (src/.../parser-command-dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/parser/dtos/parser-command-dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        allowedProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : ['input', 'output', 'logLevel']\n                    \n                \n\n            \n                \n                    list of allowed properties\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
